package com.google.checkoutsdk.integrationwizard;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.windows.WindowManager;

public final class WebXmlVisualPanel extends JPanel {
    
    // The xml fragment to insert into web.xml
    String webFragment;
    
    // The modified web.xml
    String modifiedWeb;
    
    // Whether there was an error reading the file or not
    boolean error = false;
    
    /** Creates new form IntegrationVisualPanel1 */
    public WebXmlVisualPanel() {
        initComponents();
        webWarningLabel.setVisible(false);
        previewWarningLabel.setVisible(false);
        continueCheckBox.setEnabled(false);
        continueCheckBox.setSelected(false);
        readWebFragment();
    }
    
    public String getName() {
        return "Modify web.xml";
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        webLabel = new javax.swing.JLabel();
        webTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        previewTextArea = new javax.swing.JTextArea();
        previewLabel = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        webWarningLabel = new javax.swing.JLabel();
        previewDescriptionLabel = new javax.swing.JLabel();
        previewWarningLabel = new javax.swing.JLabel();
        continueCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(webLabel, "web.xml file:");

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, "Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        previewTextArea.setColumns(20);
        previewTextArea.setRows(5);
        previewTextArea.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                previewTextAreaPropertyChange(evt);
            }
        });
        previewTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                previewTextAreaKeyTyped(evt);
            }
        });

        jScrollPane1.setViewportView(previewTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(previewLabel, "Preview");

        webWarningLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        webWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        webWarningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(webWarningLabel, "Warning: File not named \"web.xml\"");

        previewDescriptionLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(previewDescriptionLabel, "Preview the changes to web.xml.  You may modify them if necessary.");

        previewWarningLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        previewWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        previewWarningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(previewWarningLabel, "Warning: Preview has ben modified");

        org.openide.awt.Mnemonics.setLocalizedText(continueCheckBox, "I will modify web.xml manually (see help)");
        continueCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        continueCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(previewLabel))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(previewDescriptionLabel))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(webWarningLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                            .add(separator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(webLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(webTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(browseButton))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(continueCheckBox))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(previewWarningLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(webLabel)
                    .add(browseButton)
                    .add(webTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(webWarningLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(separator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewDescriptionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(continueCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewWarningLabel)
                .add(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void previewTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_previewTextAreaKeyTyped
        // TODO: fix warning display to show after first character
        if (modifiedWeb != null) {
            previewWarningLabel.setVisible(!error && !modifiedWeb.equals(previewTextArea.getText()));
        }
    }//GEN-LAST:event_previewTextAreaKeyTyped

    private void previewTextAreaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_previewTextAreaPropertyChange
// TODO add your handling code here:
    }//GEN-LAST:event_previewTextAreaPropertyChange

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // Generate and show the file chooser
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Locate web.xml");
        jfc.setFileSelectionMode (JFileChooser.FILES_ONLY);
        jfc.showOpenDialog(WindowManager.getDefault().getMainWindow());
        
        // Get the selected file
        File webXml = jfc.getSelectedFile();
        
        if (webFragment == null) {
            reportError("Error reading webFragment.xml file.");
        } else if (webXml != null) {
            // Reset error status
            error = false;
            modifiedWeb = null;
            continueCheckBox.setEnabled(false);
            continueCheckBox.setSelected(false);
            
            // Display file name
            webTextField.setText(webXml.getAbsolutePath());
        
            // Display warning if file is not web.xml
            if (!webXml.getName().equals("web.xml")) {
                webWarningLabel.setVisible(true);
            } else {
                webWarningLabel.setVisible(false);
            }
            
            // Read the file and display it in the preview area
            try {
                BufferedReader reader = new BufferedReader(new FileReader(webXml));
                String line = reader.readLine();
                StringBuilder lines = new StringBuilder();
                while (line != null) {
                    lines.append(line + "\n");
                    line = reader.readLine();
                }
                
                // Remove trailing new line
                if (lines.toString().endsWith("\n")) {
                    lines.deleteCharAt(lines.length()-1);
                }
                
                // Insert CheckoutSDK web.xml and set preview text
                if (insertWebFragment(lines.toString())) {
                    previewTextArea.setText(modifiedWeb);
                } else {
                    reportError("Unable to automatically insert web.xml fragment.");
                }
            } catch (FileNotFoundException ex) {
                reportError("File not found.");
            } catch (IOException ex) {
                reportError("Error reading file.");
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed
    
    private void reportError(String msg) {
        error = true;
        continueCheckBox.setEnabled(true);
        previewTextArea.setText(msg);
    }
    
    private boolean insertWebFragment(String file) {
        // TODO: Add coloring to new fragment
        int index = file.indexOf("</web-app>");
        
        if (index >= 0) {
            modifiedWeb = file.substring(0, index) + "\n" + webFragment + "\n" + file.substring(index);
            return true;
        }
        
        return false;
    }
    
    private void readWebFragment() {
        // TODO: Read this from a file as oposed to hard coding it (I had trouble
        // with the getResource() method)
        webFragment = "" +
                "<!-- Begin: Configuration for Google checkout message processing -->\n" +
                "  <servlet>\n" +
                "    <description>\n" +
                "      Servlet that receives notifications for Google Checkout\n" +
                "    </description>\n" +
                "    <display-name>CheckoutNotificationServlet</display-name>\n" +
                "    <servlet-name>CheckoutNotificationServlet</servlet-name>\n" +
                "    <servlet-class>\n" +
                "      com.google.checkout.sdk.CheckoutMessageHandlerServlet\n" +
                "    </servlet-class>\n" +
                "    <init-param>\n" +
                "      <param-name>handler-type</param-name>\n" +
                "      <param-value>notification-handler</param-value>\n" +
                "    </init-param>\n" +
                "    <load-on-startup>0</load-on-startup>\n" +
                "  </servlet>\n" +
                "\n" +
                "  <servlet>\n" +
                "    <description>\n" +
                "      Servlet that receives callback requests for Google Checkout\n" +
                "    </description>\n" +
                "    <display-name>CheckoutCallbackServlet</display-name>\n" +
                "    <servlet-name>CheckoutCallbackServlet</servlet-name>\n" +
                "    <servlet-class>\n" +
                "      com.google.checkout.sdk.CheckoutMessageHandlerServlet\n" +
                "    </servlet-class>\n" +
                "    <init-param>\n" +
                "      <param-name>handler-type</param-name>\n" +
                "      <param-value>callback-handler</param-value>\n" +
                "    </init-param>\n" +
                "    <load-on-startup>0</load-on-startup>\n" +
                "  </servlet>\n" +
                "\n" +
                "  <servlet-mapping>\n" +
                "    <servlet-name>CheckoutNotificationServlet</servlet-name>\n" +
                "    <url-pattern>/notification</url-pattern>\n" +
                "  </servlet-mapping>\n" +
                "\n" +
                "  <servlet-mapping>\n" +
                "    <servlet-name>CheckoutCallbackServlet</servlet-name>\n" +
                "    <url-pattern>/callback</url-pattern>\n" +
                "  </servlet-mapping>\n" +
                "\n" +
                "  <!-- location of configuration file for checkout with respect to context \n" +
                "    root. Using the default path here. -->\n" +
                "  <context-param>\n" +
                "    <param-name>checkout-config-file</param-name>\n" +
                "    <param-value>/WEB-INF/checkout-config.xml</param-value>\n" +
                "  </context-param>\n" +
                "\n" +
                "  <listener>\n" +
                "    <description>\n" +
                "      Servlet context listener that configures some needed context attributes\n" +
                "    </description>\n" +
                "    <listener-class>com.google.checkout.web.ConfigurationListener</listener-class>\n" +
                "  </listener>\n" +
                "  <!-- End: Configuration for Google checkout message processing -->";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox continueCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel previewDescriptionLabel;
    private javax.swing.JLabel previewLabel;
    private javax.swing.JTextArea previewTextArea;
    private javax.swing.JLabel previewWarningLabel;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel webLabel;
    private javax.swing.JTextField webTextField;
    private javax.swing.JLabel webWarningLabel;
    // End of variables declaration//GEN-END:variables
    
}

