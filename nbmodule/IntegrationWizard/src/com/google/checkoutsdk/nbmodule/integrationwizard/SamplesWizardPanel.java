package com.google.checkoutsdk.nbmodule.integrationwizard;

import java.awt.Component;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;

public class SamplesWizardPanel extends javax.swing.JPanel {
    
    /**
     * Creates the samples selection panel for the Integration Wizard. 
     */
    public SamplesWizardPanel() {
        initComponents();
    }
    
    /**
     * Returns the name for this panel, which is used in the wizard as both the
     * title and the name of each step.
     *
     * @return Name of this panel
     */
    public String getName() {
        return "Add Sample Pages";
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        sampleCheckBox = new javax.swing.JCheckBox();
        locationTextField = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailsTextArea = new javax.swing.JTextArea();
        browseButton = new javax.swing.JButton();

        sampleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        sampleCheckBox.setSelected(true);
        sampleCheckBox.setText("I would like to add samples pages to this project");
        sampleCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sampleCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        sampleCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sampleCheckBoxStateChanged(evt);
            }
        });

        locationLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        locationLabel.setText("Location:");

        detailsTextArea.setColumns(20);
        detailsTextArea.setLineWrap(true);
        detailsTextArea.setRows(5);
        detailsTextArea.setText("These sample JSPs are:\n - Good examples of how to write handlers for Checkout SDK\n - Useful for testing ");
        detailsTextArea.setBorder(null);
        detailsTextArea.setOpaque(false);
        jScrollPane1.setViewportView(detailsTextArea);

        browseButton.setText("Browse");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(locationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(browseButton))
                    .add(sampleCheckBox)
                    .add(locationLabel)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(sampleCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(locationLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(browseButton)
                    .add(locationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /*************************************************************************/
    /*                           EVENT HANDLERS                              */
    /*************************************************************************/
    
    private void sampleCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sampleCheckBoxStateChanged
        if (sampleCheckBox.isSelected()) {
            this.locationTextField.setEnabled(true);
            this.browseButton.setEnabled(true);
        } else {
            this.locationTextField.setEnabled(false);
            this.browseButton.setEnabled(false);
        }
    }//GEN-LAST:event_sampleCheckBoxStateChanged
    
    /*************************************************************************/
    /*                          SWING VARIABLES                              */
    /*************************************************************************/    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextArea detailsTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JCheckBox sampleCheckBox;
    // End of variables declaration//GEN-END:variables
    
    /*************************************************************************/
    /*                          UTILITY METHODS                              */
    /*************************************************************************/
    
    /*************************************************************************/
    /*                       SHARED DATA ACCESSORS                           */
    /*************************************************************************/
    
    /*************************************************************************/
    /*                       WIZARD DESCRIPTOR PANEL                         */
    /*************************************************************************/
   
    public static class Panel implements WizardDescriptor.Panel {
        // The visual component of this panel
        private SamplesWizardPanel component;

        public Component getComponent() {
            if (component == null) {
                component = new SamplesWizardPanel();
            }
            return component;
        }

        public HelpCtx getHelp() {
            return HelpCtx.DEFAULT_HELP;
        }

        public boolean isValid() {
            return true;
        }

        // TODO: Add listener to enable/disable 'next' button
        public final void addChangeListener(ChangeListener l) {}
        public final void removeChangeListener(ChangeListener l) {}
        public void readSettings(Object settings) {}
        public void storeSettings(Object settings) {}
    }
}