    package com.google.checkoutsdk.nbmodule.integrationwizard;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;

public class Integrator {
    // The settings built by the Integration Wizard
    Settings settings;
    
    // The error message generated by a call to integrate()
    String errorMessage;
    
    public Integrator(Settings settings) {
        this.settings = settings;
        errorMessage = null;
    }
    
    public String getErrorMessage() {
        return errorMessage;
    }
    
    public boolean integrate() {
        boolean success = true;
        
        // Add checkout-sdk.jar to your WEB_INF/lib directory
        if (!copyCheckoutSdkJar()) {
            success = false;
        }
        
        // Modify web.xml
        if (success && settings.getModifiedWebXml() != null) {
            if (!writeModifiedWebXml()) {
                success = false;
            }
        }
        
        // Create checkout-config.xml
        if (success) {
            if (!createCheckoutConfigXml()) {
                success = false;
            }
        }
        
        // Add sample JSPs
        /*if (success && settings.addSamples()) {
            if (!copySamplesJsps()) {
                success = false;
            }
        }*/
        
        // Create default handlers
        /*if (success && settings.addHandlers()) {
            if (!copyDefaultHandlers()) {
                success = false;
            }
        }*/
        
        return success;
    }
    
    /*************************************************************************/
    /*                   STEP-BY-STEP INTEGRATION METHODS                    */
    /*************************************************************************/
    
    private boolean copyCheckoutSdkJar() {
        boolean success = true;
        
        // Get the checkout-sdk.jar.txt resource
        InputStream source = getClass().getResourceAsStream("xml/checkout-sdk.jar.txt");
        
        // Get the checkout-sdk.jar path
        String path = settings.getWebInfDirectory().getPath() + "/lib/checkout-sdk.jar";
        File file = new File(path);
            
        // Write the file
        try {
            writeFileFromStream(source, file);
        } catch (IOException ex) {
            success = false;
            errorMessage = "Could not write checkout-sdk.jar";
        }
        
        return success;
    }
    
    private boolean writeModifiedWebXml() {
        boolean success = true;
        
        // Get the source and destination
        String source = settings.getModifiedWebXml();
        File file = settings.getWebXmlFile();
        
        // Write the file
        try {
            writeFileFromString(source, file);
        } catch (IOException ex) {
            success = false;
            errorMessage = "Could not write web.xml";
        }
        
        return success;
    }
    
    private boolean createCheckoutConfigXml() {
        boolean success = true;
        
        // Get the source and destination
        String source = settings.getConfigManager().getBody();
        File file = settings.getConfigManager().getFile();
        
        // Write the file
        try {
            writeFileFromString(source, file);
        } catch (IOException ex) {
            success = false;
            errorMessage = "Could not write web.xml";
        }
        
        return success;
    }
    
    /*************************************************************************/
    /*                         FILE WRITING METHODS                          */
    /*************************************************************************/
    
    private static void createFile(File file, boolean dir) throws IOException {
        File parent = file.getParentFile();
        
        // Create the parent folder if necessary
        if (parent != null && !parent.exists()) {
            createFile(file.getParentFile(), true);
        }
        
        // Create this file if necessary
        if (!file.exists()) {
            if (dir) {
                file.mkdir();
            } else {
                file.createNewFile();
            }
        }
    }
    
    private static void writeFileFromString(String source, File dest) throws IOException {
        StringReader reader = new StringReader(source);
        writeFileFromReader(reader, dest);
    }
    
    private static void writeFileFromStream(InputStream source, File dest) throws IOException {
        InputStreamReader reader = new InputStreamReader(source);
        writeFileFromReader(reader, dest);
    }
    
    private static void writeFileFromReader(Reader source, File dest) throws IOException {
        // Create new file if necessary
        if (!dest.exists()) {
            createFile(dest, false);
        }
        
        // Open a writer to the file
        FileWriter writer = new FileWriter(dest);

        // Read from the input stream and write to the writer
        int ch;
        while ((ch = source.read()) != -1) {
            writer.write(ch);
        }

        // Close streams
        source.close();
        writer.close();
    }
}
