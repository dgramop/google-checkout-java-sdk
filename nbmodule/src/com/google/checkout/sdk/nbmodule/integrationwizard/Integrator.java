/*******************************************************************************
 * Copyright (C) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

package com.google.checkout.sdk.nbmodule.integrationwizard;

import com.google.checkout.sdk.nbmodule.common.CheckoutFileWriter;
import com.google.checkout.sdk.nbmodule.common.ProgressTracker;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.jar.JarFile;
import java.util.zip.ZipEntry;

public class Integrator {
  // The settings built by the Integration Wizard
  Settings settings;
  
  // The progress tracker shown during integration
  ProgressTracker progressTracker;
  
  // The error message generated by a call to integrate()
  String errorMessage;
  
  public Integrator(Settings settings, ProgressTracker progressTracker) {
    this.settings = settings;
    this.progressTracker = progressTracker;
    calculateBarSize();
    errorMessage = null;
  }
  
  private void calculateBarSize() {
    int size = 0;
    
    // Copying checkout-sdk.jar (weight = 3)
    if (!copyCheckoutSdkJar()) {
      size = size + 3;
    }
    
    // Modifying web.xml (weight = 1)
    if (settings.getModifiedWebXml() != null) {
      size++;
    }
    
    // Adding checkout-config.xml (weight = 1)
    size++;
    
    // Adding sample JSPs (weight = 1)
    if (settings.addSamples()) {
      size++;
    }
    
    // Actually set size
    progressTracker.setMaxProgress(size);
  }
  
  public String getErrorMessage() {
    return errorMessage;
  }
  
  public boolean integrate() {
    boolean success = true;
    
    // Add checkout-sdk.jar to your WEB_INF/lib directory
    progressTracker.setCurrentOperation("Creating checkout-sdk.jar...");
    if (!copyCheckoutSdkJar()) {
      success = false;
    }
    progressTracker.incProgress(3);
    
    // Modify web.xml
    if (success && settings.getModifiedWebXml() != null) {
      progressTracker.setCurrentOperation("Modifying web.xml...");
      if (!writeModifiedWebXml()) {
        success = false;
      }
      progressTracker.incProgress();
    }
    
    // Create checkout-config.xml
    if (success) {
      progressTracker.setCurrentOperation("Creating checkout-config.xml...");
      if (!createCheckoutConfigXml()) {
        success = false;
      }
      progressTracker.incProgress();
    }
    
    // Add sample JSPs
    if (success && settings.addSamples()) {
      progressTracker.setCurrentOperation("Adding sample JPS...");
      if (!copySamplesJsps()) {
        success = false;
      }
      progressTracker.incProgress();
    }
    
    return success;
  }
  
  /*************************************************************************/
  /*                   STEP-BY-STEP INTEGRATION METHODS                    */
  /*************************************************************************/
  
  private boolean copyCheckoutSdkJar() {
    boolean success = true;
    
    // Get the checkout-sdk.jar.txt resource
    InputStream source = 
        getClass().getResourceAsStream("/resources/checkout-sdk.jar");
    
    // Get the checkout-sdk.jar path
    String path = settings.getWebInfDirectory().getPath() + 
        "/lib/checkout-sdk.jar";
    File dest = new File(path);
    
    // Write the file
    try {
      CheckoutFileWriter.writeFileFromStream(source, dest);
    } catch (IOException ex) {
      success = false;
      errorMessage = "Could not write checkout-sdk.jar";
    }
    
    return success;
  }
  
  private boolean writeModifiedWebXml() {
    boolean success = true;
    
    // Get the source and destination
    String source = settings.getModifiedWebXml();
    File dest = settings.getWebXmlFile();
    
    // Write the file
    try {
      CheckoutFileWriter.writeFileFromString(source, dest);
    } catch (IOException ex) {
      success = false;
      errorMessage = "Could not write web.xml";
    }
    
    return success;
  }
  
  private boolean createCheckoutConfigXml() {
    boolean success = true;
    
    // Get the source and destination
    String source = settings.getConfigManager().getBody();
    File dest = settings.getConfigManager().getFile();
    
    // Write the file
    try {
      CheckoutFileWriter.writeFileFromString(source, dest);
    } catch (IOException ex) {
      success = false;
      errorMessage = "Could not write checkout-config.xml";
    }
    
    return success;
  }
  
  private boolean copySamplesJsps() {
    boolean success = true;
    
    // Get the sample directory provided by the user
    File destDirectory = settings.getSamplesDirectory();
    
    // Get the sample names
    String dir = "resources/samples/";
    HashMap streams = getResourcesInJar(dir);
    Object[] keys = streams.keySet().toArray();
    
    // Loop through each of the samples
    for (int i=0; i<keys.length && success; i++) {
      // Get the source
      InputStream source = (InputStream) streams.get(keys[i]);
      
      // Get the destination
      String path = destDirectory.getPath() + "/" + keys[i];
      File dest = new File(path);
      
      // Write the file
      try {
        CheckoutFileWriter.writeFileFromStream(source, dest);
      } catch (IOException ex) {
        success = false;
        errorMessage = "Could not write " + keys[i];
      }
    }
    
    return success;
  }
  
  /*************************************************************************/
  /*                         JAR READING METHODS                           */
  /*************************************************************************/
  
  private JarFile getJarFile() {
    JarFile jar = null;
    String thisPath = 
        "/com/google/checkout/sdk/nbmodule/integrationwizard/Integrator.class";
    URL url = getClass().getResource(thisPath);
    String path = url.getPath().replace("file:", "");
    
    int loc = path.indexOf(".jar!") + 4;
    String jarPath = path.substring(0, loc);
    
    try {
      jar = new JarFile(jarPath);
    } catch (IOException ex) {
      ex.printStackTrace();
    }
    
    return jar;
  }
  
  private HashMap getResourcesInJar(String dir) {
    HashMap streams = new HashMap();
    JarFile jar = getJarFile();
    Enumeration entries = jar.entries();
    
    // Remove leading / from dir
    if (dir.startsWith("/")) {
      dir = dir.substring(1);
    }

    // Get all entries in the jar that start with dir
    while (entries.hasMoreElements()) {
      ZipEntry entry = (ZipEntry)entries.nextElement();
      String name = entry.getName();
      if (name.startsWith(dir) && !entry.isDirectory()) {
        int loc = name.lastIndexOf("/");
        name = name.substring(loc+1);
        try {
          streams.put(name, jar.getInputStream(entry));
        } catch (IOException ex) {
          // Skip this entry
        }
      }
    }

    return streams;
  }
}