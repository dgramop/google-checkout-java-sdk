package com.google.checkoutsdk.nbmodule.integrationwizard;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;

public final class WebXmlWizardPanel extends JPanel {
    
    // The xml fragment to insert into web.xml
    private String webFragment;
    
    // Whether there was an error reading the file or not
    private boolean error = false;
    
    // Integration settings, built by this wizard
    private Settings settings;
        
    /**
     * Creates the web.xml choosing panel for the Integration Wizard. 
     */
    public WebXmlWizardPanel() {        
        initComponents();
        continueCheckBox.setEnabled(false);
        continueCheckBox.setSelected(false);
        readWebFragment();
    }
    
    /**
     * Returns the name for this panel, which is used in the wizard as both the
     * title and the name of each step.
     *
     * @return Name of this panel
     */
    public String getName() {
        return "Modify web.xml";
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        webXmlTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        previewTextArea = new javax.swing.JTextArea();
        previewLabel = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        previewDescriptionLabel = new javax.swing.JLabel();
        continueCheckBox = new javax.swing.JCheckBox();
        webXmlLabel = new javax.swing.JLabel();

        webXmlTextField.setEditable(false);

        previewTextArea.setColumns(20);
        previewTextArea.setRows(5);
        previewTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                previewTextAreaKeyTyped(evt);
            }
        });

        jScrollPane1.setViewportView(previewTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(previewLabel, "Preview");

        previewDescriptionLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(previewDescriptionLabel, "Preview the changes, and modify them if necessary.");

        org.openide.awt.Mnemonics.setLocalizedText(continueCheckBox, "I will modify web.xml manually (see help)");
        continueCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        continueCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        webXmlLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(webXmlLabel, "This will modify your web.xml file found at:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, separator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, webXmlTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, webXmlLabel)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, previewLabel)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, previewDescriptionLabel)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, continueCheckBox))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(webXmlLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(webXmlTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(8, 8, 8)
                .add(separator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewDescriptionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(continueCheckBox)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /*************************************************************************/
    /*                           EVENT HANDLERS                              */
    /*************************************************************************/
    
    private void previewTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_previewTextAreaKeyTyped
        // TODO: display warning after text changes
        //if (settings.getModifiedWebXml() != null) {
            //previewWarningLabel.setVisible(!error && !settings.getModifiedWebXml().equals(previewTextArea.getText()));
        //}
    }//GEN-LAST:event_previewTextAreaKeyTyped
    
    /*************************************************************************/
    /*                          SWING VARIABLES                              */
    /*************************************************************************/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox continueCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel previewDescriptionLabel;
    private javax.swing.JLabel previewLabel;
    private javax.swing.JTextArea previewTextArea;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel webXmlLabel;
    private javax.swing.JTextField webXmlTextField;
    // End of variables declaration//GEN-END:variables
 
    /*************************************************************************/
    /*                          UTILITY METHODS                              */
    /*************************************************************************/
  
     private void updatePanel() {
        // Get the default web.xml if one doesn't already exist
        if (settings.getWebXmlFile() == null) {
            URI uri = settings.getWebInfDirectory().toURI().resolve("web.xml");
            settings.setWebXmlFile(new File(uri));
        }
        
        // Set the web.xml field
        webXmlTextField.setText(settings.getWebXmlFile().getPath());
        
        // Fill the preview area with a newly processed file or an modified file
        if (settings.getModifiedWebXml() != null) {
            previewTextArea.setText(settings.getModifiedWebXml());
        } else {
            processWebXmlFile();
        }
    }
    
    /**
     * Reads the new web.xml file, generates the modified version (by inserting
     * the web fragment), and displays the final text or an error message.
     */
    private void processWebXmlFile() {        
        String errorMsg = null;
        
        if (webFragment == null) {
            errorMsg = "Error reading webFragment.xml file.";
        } else if (settings.getWebXmlFile() == null) {
            errorMsg = "No file selected.";
        } else {
            // Reset error status
            error = false;
            settings.setModifiedWebXml(null);
            continueCheckBox.setEnabled(false);
            continueCheckBox.setSelected(false);
            
            // Read the file and display it in the preview area
            try {
                BufferedReader reader = new BufferedReader(new FileReader(settings.getWebXmlFile()));
                String line = reader.readLine();
                StringBuilder lines = new StringBuilder();
                while (line != null) {
                    lines.append(line + "\n");
                    line = reader.readLine();
                }
                
                // Remove trailing new line
                if (lines.toString().endsWith("\n")) {
                    lines.deleteCharAt(lines.length()-1);
                }
                
                // Insert CheckoutSDK web.xml and set preview text
                if (insertWebFragment(lines.toString())) {
                    previewTextArea.setText(settings.getModifiedWebXml());
                } else {
                    errorMsg = "Unable to automatically insert web.xml fragment.";
                }
            } catch (FileNotFoundException ex) {
                errorMsg = "File not found.";
            } catch (IOException ex) {
                errorMsg = "Error reading file.";
            }
        }
        
        // Handle errors
        if (errorMsg != null) {
            error = true;
            continueCheckBox.setEnabled(true);
            previewTextArea.setText(errorMsg);
            settings.setModifiedWebXml(null);
        }
    }
    
    private boolean insertWebFragment(String file) {
        // TODO: Add coloring to new fragment
        int index = file.indexOf("</web-app>");
        
        if (index >= 0) {
            settings.setModifiedWebXml(file.substring(0, index) + "\n" + webFragment + "\n" + file.substring(index));
            return true;
        }
        
        return false;
    }
    
    private void readWebFragment() {
        InputStream is = this.getClass().getResourceAsStream("xml/webFragment.xml");
        if (is != null) {
            try {
                StringBuilder buf = new StringBuilder();

                int ch;
                while ((ch = is.read()) != -1) {
                    buf.append((char) ch);
                }
                is.close();

                webFragment = buf.toString();
            } catch (IOException ex) {
                webFragment = null;
            }
        } else {
            webFragment = null;
        }
    }
    
    private void recordSettings() {
        // Save the changes to the preview area
        if (!error) {
            settings.setModifiedWebXml(previewTextArea.getText());
        }
    }
    
    /*************************************************************************/
    /*                         SETTINGS ACCESSORS                            */
    /*************************************************************************/
    
    public Settings getSettings() {
        return settings;
    }
    
    public void setSettings(Settings settings) {
        this.settings = settings;
    }
    
    /*************************************************************************/
    /*                       WIZARD DESCRIPTOR PANEL                         */
    /*************************************************************************/
    
    public static class Panel implements WizardDescriptor.Panel {
        // The visual component of this panel
        private WebXmlWizardPanel component;
        
        public Component getComponent() {
            if (component == null) {
                component = new WebXmlWizardPanel();
            }
            return component;
        }

        public HelpCtx getHelp() {
            return HelpCtx.DEFAULT_HELP;
        }

        public boolean isValid() {
            return true;
        }

        // TODO: Add listener to enable/disable 'next' button
        public final void addChangeListener(ChangeListener l) {}
        public final void removeChangeListener(ChangeListener l) {}
        
        public void readSettings(Object settings) {
            // Read shared info from the wizard descriptor
            IntegrationWizardDescriptor descriptor = (IntegrationWizardDescriptor) settings;
            component.setSettings(descriptor.getSettings());

            // Handle the (potentially new) web.xml file
            component.updatePanel();
        }
        
        public void storeSettings(Object settings) {
            // Record the page state into settings
            component.recordSettings();
            
            // Write shared info to the wizard descriptor
            IntegrationWizardDescriptor descriptor = (IntegrationWizardDescriptor) settings;
            descriptor.setSettings(component.getSettings());
        }
    }
}
