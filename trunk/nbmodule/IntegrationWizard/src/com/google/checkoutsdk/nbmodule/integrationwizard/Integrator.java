package com.google.checkoutsdk.nbmodule.integrationwizard;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;

public class Integrator {
    // The settings built by the Integration Wizard
    Settings settings;
    
    // The progress panel shown during integration
    ProgressPanel progressPanel;
    
    // The error message generated by a call to integrate()
    String errorMessage;
    
    public Integrator(Settings settings, ProgressPanel progressPanel) {
        this.settings = settings;
        this.progressPanel = progressPanel;
        calculateBarSize();
        errorMessage = null;
    }
    
    private void calculateBarSize() {
        int size = 0;
        
        // Copying checkout-sdk.jar (weight = 3)
        if (!copyCheckoutSdkJar()) {
            size = size + 3;
        }
        
        // Modifying web.xml (weight = 1)
        if (settings.getModifiedWebXml() != null) {
            size++;
        }
        
        // Adding checkout-config.xml (weight = 1)
        size++;
        
        // Adding sample JSPs (weight = 1)
        if (settings.addSamples()) {
            size++;
        }
        
        // Actually set size
        progressPanel.setBarSize(size);
    }
    
    public String getErrorMessage() {
        return errorMessage;
    }
    
    public boolean integrate() {
        boolean success = true;
        
        // Add checkout-sdk.jar to your WEB_INF/lib directory
        progressPanel.setText("Creating checkout-sdk.jar...");
        if (!copyCheckoutSdkJar()) {
            success = false;
        }
        progressPanel.incrementProgress(3);
        
        // Modify web.xml
        if (success && settings.getModifiedWebXml() != null) {
            progressPanel.setText("Modifying web.xml...");
            if (!writeModifiedWebXml()) {
                success = false;
            }
            progressPanel.incrementProgress();
        }
        
        // Create checkout-config.xml
        if (success) {
            progressPanel.setText("Creating checkout-config.xml...");
            if (!createCheckoutConfigXml()) {
                success = false;
            }
            progressPanel.incrementProgress();
        }
        
        // Add sample JSPs
        if (success && settings.addSamples()) {
            progressPanel.setText("Adding sample JPS...");
            if (!copySamplesJsps()) {
                success = false;
            }
            progressPanel.incrementProgress();
        }
        
        return success;
    }
    
    /*************************************************************************/
    /*                   STEP-BY-STEP INTEGRATION METHODS                    */
    /*************************************************************************/
    
    private boolean copyCheckoutSdkJar() {
        boolean success = true;
        
        // Get the checkout-sdk.jar.txt resource
        InputStream source = getClass().getResourceAsStream("sources/checkout-sdk.jar.txt");
        
        // Get the checkout-sdk.jar path
        String path = settings.getWebInfDirectory().getPath() + "/lib/checkout-sdk.jar";
        File dest = new File(path);
            
        // Write the file
        try {
            writeFileFromStream(source, dest);
        } catch (IOException ex) {
            success = false;
            errorMessage = "Could not write checkout-sdk.jar";
        }
        
        return success;
    }
    
    private boolean writeModifiedWebXml() {
        boolean success = true;
        
        // Get the source and destination
        String source = settings.getModifiedWebXml();
        File dest = settings.getWebXmlFile();
        
        // Write the file
        try {
            writeFileFromString(source, dest);
        } catch (IOException ex) {
            success = false;
            errorMessage = "Could not write web.xml";
        }
        
        return success;
    }
    
    private boolean createCheckoutConfigXml() {
        boolean success = true;
        
        // Get the source and destination
        String source = settings.getConfigManager().getBody();
        File dest = settings.getConfigManager().getFile();
        
        // Write the file
        try {
            writeFileFromString(source, dest);
        } catch (IOException ex) {
            success = false;
            errorMessage = "Could not write checkout-config.xml";
        }
        
        return success;
    }
    
    private boolean copySamplesJsps() {
        boolean success = true;
        
        // Get the sample directory provided by the user
        File destDirectory = settings.getSamplesDirectory();
        
        // Get the sample names
        String[] samples = getSampleNames();
        
        // Loop through each of the samples
        for (int i=0; i<samples.length  && success; i++) {
            // Get the source
            String name = "sources/samples/" + samples[i];
            InputStream source = getClass().getResourceAsStream(name);
        
            // Get the destination
            String path = destDirectory.getPath() + "/" + samples[i];
            File dest = new File(path);

            // Write the file
            try {
                writeFileFromStream(source, dest);
            } catch (IOException ex) {
                success = false;
                errorMessage = "Could not write " + samples[i];
            }
        }
        
        return success;
    }
    
    /*************************************************************************/
    /*                    HARDCODED METHODS (REMOVE ASAP)                    */
    /*************************************************************************/
    
    private static String[] getSampleNames() {
        // TODO: REMOVE THIS!!!
        String[] samples = new String[18];
        
        samples[0] = "addmerchantordernumber.jsp";
        samples[1] = "addtrackingdata.jsp";
        samples[2] = "archiveorder.jsp";
        samples[3] = "authorizeorder.jsp";
        samples[4] = "cancelorder.jsp";
        samples[5] = "chargeorder.jsp";
        samples[6] = "deliverorder.jsp";
        samples[7] = "index.jsp";
        samples[8] = "left_bottom.jsp";
        samples[9] = "left_top.jsp";
        samples[10] = "order_detail.jsp";
        samples[11] = "orders.jsp";
        samples[12] = "processorder.jsp";
        samples[13] = "refundorder.jsp";
        samples[14] = "sendbuyermessage.jsp";
        samples[15] = "shipping-fragment.jsp";
        samples[16] = "shopping_cart.jsp";
        samples[17] = "unarchiveorder.jsp";
        
        return samples;
    }
    
    /*************************************************************************/
    /*                         FILE WRITING METHODS                          */
    /*************************************************************************/
    
    private static void createFile(File file, boolean dir) throws IOException {
        File parent = file.getParentFile();
        
        // Create the parent folder if necessary
        if (parent != null && !parent.exists()) {
            parent.mkdirs();
        }
        
        // Create this file if necessary
        if (!file.exists()) {
            if (dir) {
                file.mkdir();
            } else {
                file.createNewFile();
            }
        }
    }
    
    private static void writeFileFromString(String source, File dest) throws IOException {
        StringReader reader = new StringReader(source);
        writeFileFromReader(reader, dest);
    }
    
    private static void writeFileFromStream(InputStream source, File dest) throws IOException {
        InputStreamReader reader = new InputStreamReader(source);
        writeFileFromReader(reader, dest);
    }
    
    private static void writeFileFromFile(File source, File dest) throws IOException {
        FileReader reader = new FileReader(source);
        writeFileFromReader(reader, dest);
    }
    
    private static void writeFileFromReader(Reader source, File dest) throws IOException {
        // Create new file if necessary
        if (!dest.exists()) {
            createFile(dest, false);
        }
        
        // Open a writer to the file
        FileWriter writer = new FileWriter(dest);

        // Read from the input stream and write to the writer
        int ch;
        while ((ch = source.read()) != -1) {
            writer.write(ch);
        }

        // Close streams
        source.close();
        writer.close();
    }
}
