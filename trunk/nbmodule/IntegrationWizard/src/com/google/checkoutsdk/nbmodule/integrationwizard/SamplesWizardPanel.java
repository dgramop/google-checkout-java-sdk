package com.google.checkoutsdk.nbmodule.integrationwizard;

import java.awt.Component;
import java.io.File;
import java.net.URISyntaxException;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeListener;
import org.netbeans.api.project.Project;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileStateInvalidException;
import org.openide.util.HelpCtx;
import org.openide.windows.WindowManager;

public class SamplesWizardPanel extends javax.swing.JPanel {
    
    // Integration settings, built by this wizard
    private Settings settings;
    
    /**
     * Creates the samples selection panel for the Integration Wizard. 
     */
    public SamplesWizardPanel() {
        initComponents();
    }
    
    /**
     * Returns the name for this panel, which is used in the wizard as both the
     * title and the name of each step.
     *
     * @return Name of this panel
     */
    public String getName() {
        return "Add Sample Pages";
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        addSamplesCheckBox = new javax.swing.JCheckBox();
        samplesDirectoryTextField = new javax.swing.JTextField();
        samplesDirectoryLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailsTextArea = new javax.swing.JTextArea();
        browseButton = new javax.swing.JButton();

        addSamplesCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        addSamplesCheckBox.setText("I would like to add samples pages to this project");
        addSamplesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        addSamplesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        addSamplesCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                addSamplesCheckBoxStateChanged(evt);
            }
        });

        samplesDirectoryLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        samplesDirectoryLabel.setText("Samples directory:");

        detailsTextArea.setColumns(20);
        detailsTextArea.setLineWrap(true);
        detailsTextArea.setRows(5);
        detailsTextArea.setText("These sample JSPs are:\n - Good examples of how to write handlers for Checkout SDK\n - Useful for testing ");
        detailsTextArea.setBorder(null);
        detailsTextArea.setOpaque(false);
        jScrollPane1.setViewportView(detailsTextArea);

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(samplesDirectoryTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(browseButton))
                    .add(addSamplesCheckBox)
                    .add(samplesDirectoryLabel)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(addSamplesCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(samplesDirectoryLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(browseButton)
                    .add(samplesDirectoryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /*************************************************************************/
    /*                           EVENT HANDLERS                              */
    /*************************************************************************/
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // Generate and show the file chooser
        JFileChooser jfc = new JFileChooser(getFile(settings.getProject().getProjectDirectory()));
        jfc.setDialogTitle("Samples Directory");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.showOpenDialog(WindowManager.getDefault().getMainWindow());
        
        // Fill the samples directory text field with the located directory
        String text = jfc.getSelectedFile().getPath();
        samplesDirectoryTextField.setText(text);
    }//GEN-LAST:event_browseButtonActionPerformed

    private void addSamplesCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_addSamplesCheckBoxStateChanged
        boolean selected = addSamplesCheckBox.isSelected();
        samplesDirectoryTextField.setEnabled(selected);
        browseButton.setEnabled(selected);
        settings.setAddSamples(selected);
    }//GEN-LAST:event_addSamplesCheckBoxStateChanged
    
    /*************************************************************************/
    /*                          SWING VARIABLES                              */
    /*************************************************************************/    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addSamplesCheckBox;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextArea detailsTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel samplesDirectoryLabel;
    private javax.swing.JTextField samplesDirectoryTextField;
    // End of variables declaration//GEN-END:variables
    
    /*************************************************************************/
    /*                          UTILITY METHODS                              */
    /*************************************************************************/

    private void updatePanel() {
        // Generate default samples directory if none provided
        if (settings.getSamplesDirectory() == null) {
            try {
                FileObject projectDirectory = settings.getProject().getProjectDirectory();
                File file = new File(projectDirectory.getURL().toURI().resolve("web/checkout/"));
                settings.setSamplesDirectory(file);
            } catch (URISyntaxException ex) {
                // Okay to not have a default
            } catch (FileStateInvalidException ex) {
                // Okay to not have a default
            }
        }
        
        // Show the samples directory in the text field
        samplesDirectoryTextField.setText(settings.getSamplesDirectory().getPath());
        
        // Set the check box
        addSamplesCheckBox.setSelected(settings.addSamples());
    }
    
    private void recordSettings() {
        // Validate samples directory
        // TODO: Fix validation to check whether the text is really a directory
        File dir = new File(samplesDirectoryTextField.getText());
        if (!dir.exists() || dir.isDirectory()) {
            settings.setSamplesDirectory(dir);
        }
    }
    
    private File getFile(FileObject file) {
        File ret = null;
        try {
            ret = new File(file.getURL().getFile());
        } catch (FileStateInvalidException ex) {}
        return ret;
    }
    
    /*************************************************************************/
    /*                         SETTINGS ACCESSORS                            */
    /*************************************************************************/
    
    public Settings getSettings() {
        return settings;
    }
    
    public void setSettings(Settings settings) {
        this.settings = settings;
    }
    
    /*************************************************************************/
    /*                       WIZARD DESCRIPTOR PANEL                         */
    /*************************************************************************/
   
    public static class Panel implements WizardDescriptor.Panel {
        // The visual component of this panel
        private SamplesWizardPanel component;

        public Component getComponent() {
            if (component == null) {
                component = new SamplesWizardPanel();
            }
            return component;
        }

        public HelpCtx getHelp() {
            return HelpCtx.DEFAULT_HELP;
        }

        public boolean isValid() {
            return true;
        }

        // TODO: Add listener to enable/disable 'next' button
        public final void addChangeListener(ChangeListener l) {}
        public final void removeChangeListener(ChangeListener l) {}
        
        public void readSettings(Object settings) {
            // Read shared info from the wizard descriptor
            IntegrationWizardDescriptor descriptor = (IntegrationWizardDescriptor) settings;
            component.setSettings(descriptor.getSettings());
            
            // Update the samples directory text field & check box
            component.updatePanel();
        }
        
        public void storeSettings(Object settings) {
            // Record the page state into settings
            component.recordSettings();
            
            // Write shared info to the wizard descriptor
            IntegrationWizardDescriptor descriptor = (IntegrationWizardDescriptor) settings;
            descriptor.setSettings(component.getSettings());
        }
    }
}