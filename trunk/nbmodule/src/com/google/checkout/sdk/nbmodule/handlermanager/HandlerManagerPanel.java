package com.google.checkout.sdk.nbmodule.handlermanager;

import java.awt.Dialog;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectInformation;
import org.netbeans.api.project.ui.OpenProjects;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;

public class HandlerManagerPanel extends javax.swing.JPanel {
        
    // Combo box models
    DefaultComboBoxModel projectModel;
    
    // Map of open projects
    HashMap projects;
    
    /** Creates new form HandlerManagerPanel */
    public HandlerManagerPanel() {
        projectModel = new DefaultComboBoxModel();
        projects = new HashMap();
        
        initComponents();
        
        // Initialize the map of projects
        Project[] openProjects = OpenProjects.getDefault().getOpenProjects();
        for (int i=0; i<openProjects.length; i++) {
            Project p = openProjects[i];
            ProjectInformation info = (ProjectInformation)p.getLookup().lookup(ProjectInformation.class);
            if (info != null) {
                projects.put(info.getDisplayName(), p);
            }
        }
        
        // Initialize the list of projects
        String name = getDefaultProjectName();        
        Object[] keys = projects.keySet().toArray();
        for (int i=0; i<keys.length; i++) {
            projectModel.addElement((String) keys[i]);
            
            // Select if default project
            if (((String) keys[i]).equals(name)) {
                projectList.setSelectedIndex(i);
            }
        }
    }
    
    private String getDefaultProjectName() {
        Project defaultProject = OpenProjects.getDefault().getMainProject();
        ProjectInformation info = (ProjectInformation)defaultProject.getLookup().lookup(ProjectInformation.class);
        return info.getDisplayName();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        tabbedPane = new javax.swing.JTabbedPane();
        notificationScrollPane = new javax.swing.JScrollPane();
        notificationTable = new javax.swing.JTable();
        callbackScrollPane = new javax.swing.JScrollPane();
        callbackTable = new javax.swing.JTable();
        newHandlerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();

        notificationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"new-order-notification", "com.google.checkout.sdk.NewOrderNotificationHandler"},
                {"risk-information-notification", "com.google.checkout.sdk.RiskInformationNotificationHandler"},
                {"order-state-change-notification", "com.google.checkout.sdk.OrderStateChangeNotificationHandler"},
                {"charge-amount-notification", "com.google.checkout.sdk.ChargeAmountNotificationHandler"},
                {"refund-amount-notification", "com.google.checkout.sdk.RefundAmountNotificationHandler"},
                {"chargeback-amount-notification", "com.google.checkout.sdk.ChargebackAmountNotificationHandler"},
                {"authorization-amount-notification", "com.google.checkout.sdk.AuthorizationAmountNotificationHandler"}
            },
            new String [] {
                "Message Type", "Handler Class"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        notificationScrollPane.setViewportView(notificationTable);

        tabbedPane.addTab("Notifications", notificationScrollPane);

        callbackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"merchant-calculation-callback", "com.google.checkout.sdk.MerchantCalculationCallbackHandler"}
            },
            new String [] {
                "Message Type", "Handler Class"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        callbackScrollPane.setViewportView(callbackTable);

        tabbedPane.addTab("Callbacks", callbackScrollPane);

        newHandlerButton.setText("Create New Handler");
        newHandlerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newHandlerButtonActionPerformed(evt);
            }
        });

        projectList.setFont(new java.awt.Font("Dialog", 0, 12));
        projectList.setModel(projectModel);
        jScrollPane1.setViewportView(projectList);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Projects:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(newHandlerButton)
                    .add(tabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(tabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(newHandlerButton))
                    .add(jScrollPane1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newHandlerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newHandlerButtonActionPerformed
        // Create the new handler dialog
        NewHandlerPanel panel = new NewHandlerPanel();
        DialogDescriptor desc = new DialogDescriptor(
                panel,  // panel to display
                "Create New Checkout Handler",  // dialog title
                true,  // modal
                new Object[] {"Create", "Close"},  // options
                "Create",  // initial value (selected option)
                DialogDescriptor.DEFAULT_ALIGN,  // options alignment
                null,  // help control
                null);  // action listener

        // Show the Handler Manager dialog
        Dialog dialog = DialogDisplayer.getDefault().createDialog(desc);
        dialog.setVisible(true);
        dialog.toFront();
    }//GEN-LAST:event_newHandlerButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane callbackScrollPane;
    private javax.swing.JTable callbackTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newHandlerButton;
    private javax.swing.JScrollPane notificationScrollPane;
    private javax.swing.JTable notificationTable;
    private javax.swing.JList projectList;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
    
}
